// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelClient interface {
	ClientChat(ctx context.Context, opts ...grpc.CallOption) (Channel_ClientChatClient, error)
	PeerChat(ctx context.Context, opts ...grpc.CallOption) (Channel_PeerChatClient, error)
}

type channelClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelClient(cc grpc.ClientConnInterface) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) ClientChat(ctx context.Context, opts ...grpc.CallOption) (Channel_ClientChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Channel_ServiceDesc.Streams[0], "/proto.Channel/ClientChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelClientChatClient{stream}
	return x, nil
}

type Channel_ClientChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type channelClientChatClient struct {
	grpc.ClientStream
}

func (x *channelClientChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *channelClientChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *channelClient) PeerChat(ctx context.Context, opts ...grpc.CallOption) (Channel_PeerChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Channel_ServiceDesc.Streams[1], "/proto.Channel/PeerChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelPeerChatClient{stream}
	return x, nil
}

type Channel_PeerChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type channelPeerChatClient struct {
	grpc.ClientStream
}

func (x *channelPeerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *channelPeerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChannelServer is the server API for Channel service.
// All implementations must embed UnimplementedChannelServer
// for forward compatibility
type ChannelServer interface {
	ClientChat(Channel_ClientChatServer) error
	PeerChat(Channel_PeerChatServer) error
	mustEmbedUnimplementedChannelServer()
}

// UnimplementedChannelServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServer struct {
}

func (UnimplementedChannelServer) ClientChat(Channel_ClientChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientChat not implemented")
}
func (UnimplementedChannelServer) PeerChat(Channel_PeerChatServer) error {
	return status.Errorf(codes.Unimplemented, "method PeerChat not implemented")
}
func (UnimplementedChannelServer) mustEmbedUnimplementedChannelServer() {}

// UnsafeChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServer will
// result in compilation errors.
type UnsafeChannelServer interface {
	mustEmbedUnimplementedChannelServer()
}

func RegisterChannelServer(s grpc.ServiceRegistrar, srv ChannelServer) {
	s.RegisterService(&Channel_ServiceDesc, srv)
}

func _Channel_ClientChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelServer).ClientChat(&channelClientChatServer{stream})
}

type Channel_ClientChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type channelClientChatServer struct {
	grpc.ServerStream
}

func (x *channelClientChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *channelClientChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Channel_PeerChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelServer).PeerChat(&channelPeerChatServer{stream})
}

type Channel_PeerChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type channelPeerChatServer struct {
	grpc.ServerStream
}

func (x *channelPeerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *channelPeerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Channel_ServiceDesc is the grpc.ServiceDesc for Channel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Channel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientChat",
			Handler:       _Channel_ClientChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PeerChat",
			Handler:       _Channel_PeerChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "channel.proto",
}
